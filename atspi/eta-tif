#!/usr/bin/env python3

import pyatspi
import dbus
import signal
import sys

import gi

gi.require_version('XApp', '1.0')
gi.require_version('Gtk', '3.0')
from gi.repository import GLib, Gtk, XApp

import threading

session_bus = dbus.SessionBus()


def get_dbus_interface(name, path, interface):
    try:
        obj = session_bus.get_object(name, path)
        return dbus.Interface(obj, dbus_interface=interface)
    except dbus.DBusException as e:
        print(f"Failed to retrieve dbus interface: {e}")
        return None


def get_keyboard():
    try:
        obj = get_dbus_interface(
            'org.eta.virtualkeyboard',
            '/VirtualKeyboard',
            'org.eta.virtualkeyboard'
        )
        return obj
    except Exception as e:
        print(e)
        return None


def dbus_show_keyboard(show, is_password):
    keyboard = get_keyboard()
    if keyboard:
        try:
            if not keyboard.getEnableAtspi():
                return
            if show:
                keyboard.show(is_password)
            else:
                pass
        except dbus.DBusException as e:
            print(f"Failed to call method on keyboard: {e}")
        except Exception as e:
            print(f"Unexpected error calling method on keyboard: {e}")


def create_focus_changed_callback(show_keyboard_function):
    def on_focus_changed(event):
        print(f"Focused role: {event.source.getRole()}")
        try:
            atspi_role = event.source.getRole()
            show = atspi_role in [
                pyatspi.ROLE_TEXT,
                pyatspi.ROLE_ENTRY,
                pyatspi.ROLE_COMBO_BOX,
                pyatspi.ROLE_SPIN_BUTTON,
                pyatspi.ROLE_PARAGRAPH,
                pyatspi.ROLE_PASSWORD_TEXT,
                pyatspi.ROLE_TERMINAL
            ]
            is_password = atspi_role == pyatspi.ROLE_PASSWORD_TEXT
            show_keyboard_function(show, is_password)
        except Exception as e:
            print(f"Error during focus change handling: {e}")

    return on_focus_changed


def signal_handler(signum, frame):
    sys.exit(0)

def create_indicator():
    def show_action(*args):
        keyboard = get_keyboard()
        if keyboard:
            keyboard.showForce(True)

    def auto_action(*args):
        if auto_item.get_active():
            keyboard = get_keyboard()
            if keyboard:
                try:
                    keyboard.setEnableAtspi(True)
                except Exception as e:
                    print(f"Error enabling auto mode: {e}")

    def manual_action(*args):
        if manual_item.get_active():
            keyboard = get_keyboard()
            if keyboard:
                try:
                    keyboard.setEnableAtspi(False)
                    keyboard.hide()
                except Exception as e:
                    print(f"Error enabling manual mode: {e}")

    # Create the menu for indicator
    menu = Gtk.Menu()

    # Show menu item
    show_item = Gtk.MenuItem.new_with_label('Show')
    show_item.connect('activate', show_action)
    menu.append(show_item)

    separator = Gtk.SeparatorMenuItem()
    menu.append(separator)

    # Create radio menu items
    radio_group = None
    auto_item = Gtk.RadioMenuItem.new_with_label(radio_group, 'Auto')
    radio_group = auto_item.get_group()
    auto_item.connect('activate', auto_action)
    auto_item.set_active(True)
    menu.append(auto_item)

    manual_item = Gtk.RadioMenuItem.new_with_label(radio_group, 'Manual')
    manual_item.connect('activate', manual_action)
    menu.append(manual_item)

    menu.show_all()

    # Configure status icon
    status_icon = XApp.StatusIcon()
    status_icon.set_name('eta-keyboard')
    status_icon.set_icon_name('eta-keyboard')
    status_icon.set_tooltip_text('ETA Klavye')
    status_icon.set_primary_menu(menu)
    status_icon.set_visible(True)

    # Connect show action to show the keyboard
    status_icon.connect('activate', show_action)

    Gtk.main()


if __name__ == "__main__":
    signal.signal(signal.SIGTERM, signal_handler)
    signal.signal(signal.SIGINT, signal_handler)

    th = threading.Thread(target=create_indicator)
    th.start()


    # pyatspi.Registry.registerEventListener(onfocuschanged, 'focus')
    focus_changed_callback = create_focus_changed_callback(dbus_show_keyboard)
    pyatspi.Registry.registerEventListener(
        focus_changed_callback,
        'object:state-changed:focused'
    )
    pyatspi.Registry.start()
